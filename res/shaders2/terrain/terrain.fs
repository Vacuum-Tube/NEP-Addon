#version 150
#extension GL_ARB_texture_gather : enable
/// BEGIN AUTOGENERATED HEADER
#define CONC(a,b) a##b

#define IF(c, t, e) CONC(IF_, c)(t, e)

#define IF_UNDEF(t, e) e
#define IF_0(t, e) t
#define IF_1(t, e) t
#define IF_2(t, e) t
#define IF_3(t, e) t
#define IF_4(t, e) t
#define IF_5(t, e) t
#define IF_6(t, e) t
#define IF_7(t, e) t
#define IF_8(t, e) t
#define IF_9(t, e) t
#define IF_10(t, e) t
#define IF_11(t, e) t
#define IF_12(t, e) t
#define IF_13(t, e) t
#define IF_14(t, e) t
#define IF_15(t, e) t
#define IF_16(t, e) t
// Workaround for intel HD:
#define IF_00(t, e) t
#ifdef UG_COMPILE_SPIRV
	#define gl_VertexID gl_VertexIndex

	#define LAYOUT_SAMPLER2(s, b) layout(set = s, binding = b)
	#define LAYOUT_SAMPLER(s, b) layout(set = s, binding = b)
	#define LAYOUT_UBO(s, b) layout(std140, set = s, binding = b)
	#define LAYOUT_PUSH_CONSTANT() layout(push_constant, std140)

	#define VERTEX_INPUT(loc, type, name, defaultValue) IF(loc, layout (location = loc) in type name, const type name = defaultValue)
		
	#define INPUT_MOD(loc, mod, type, name, defaultValue) IF(loc, layout (location = loc) mod in type name, const type name = defaultValue)
		
	#define INPUT(loc, type, name, defaultValue) IF(loc, layout (location = loc) in type name, const type name = defaultValue)

	#define OUTPUT(loc, type, name) IF(loc, layout (location = loc) out type name, type name)
	
	#define OUTPUT_MOD(loc, mod, type, name) IF(loc, layout (location = loc) mod out type name, type name)
	
	#define WINDING ccw

	#define LOCATION(loc) layout(location = loc) 
#else
	#extension GL_ARB_separate_shader_objects : require
	#extension GL_ARB_explicit_attrib_location : require
	#extension GL_ARB_shading_language_420pack : require

#ifdef USE_SAMPLER2
	#define LAYOUT_SAMPLER2(s, b)
#else
	#define LAYOUT_SAMPLER2(s, b) layout(binding = b)
#endif

	#define LAYOUT_SAMPLER(s, b) layout(binding = b)
	#define LAYOUT_UBO(s, b) layout(std140, binding = b)
	#define LAYOUT_PUSH_CONSTANT() layout(std140, binding = 2)

	#define VERTEX_INPUT(loc, type, name, defaultValue) IF(loc, layout (location = loc) in type name, const type name = defaultValue)
		
	#define INPUT_MOD(loc, mod, type, name, defaultValue) mod in type name
		
	#define INPUT(loc, type, name, defaultValue) in type name

	#define OUTPUT(loc, type, name) out type name
	
	#define OUTPUT_MOD(loc, mod, type, name) mod out type name
	
	#define WINDING ccw

	#define LOCATION(loc)
#endif
/// END AUTOGENERATED HEADER

INPUT(VPOS_LOC, vec3, vpos, vec3(1.0));

vec3 filterAndBlendMaterial(vec3 dposdx, vec3 dposdy, out vec3 normal, out vec2 ambientGloss);
void fragmentOutput(vec3 pos, float ambient, vec3 normal, vec3 albedo, float metalness, float glossiness, float alpha);

void main() {
	vec3 dposdx = dFdx(vpos);
	vec3 dposdy = dFdy(vpos);
	
	vec3 normal;
	vec2 ambientGloss;
	vec3 albedo = filterAndBlendMaterial(dposdx, dposdy, normal, ambientGloss);
	
	fragmentOutput(vpos, ambientGloss.x, normal, albedo, 0.0, ambientGloss.y, 1.0);  // Relozu Wassertexturen  Fix
}
